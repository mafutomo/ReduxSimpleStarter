import React, { Component } from 'react';
import { connect } from 'react-redux';
// We promoted this component to a container
// react-redux is the glue between react and redux. both otherwise are completely separate libraries.
// Redux serves to construct the application state and react provides the views to display the state. The two are inharently disconnected.
import { selectBook } from '../actions/index.js';
//This function is what we will use to make sure the action generated by the action creator actually flows to all of our reducers in our app.
import { bindActionCreators } from 'redux';

//promote this component to a container
//delete export default
class BookList extends Component {

  renderList(){
    //map is key here.
    return this.props.books.map( book => {
      return (
        <li
          key={book.title}
          onClick={() => this.props.selectBook(book)}
          className='list-group-item'>
          {book.title}
        </li>
      );
    });
  }

  render () {
    return (
      <ul className = 'list-group col-sm-4'>
        {this.renderList()}
      </ul>
    )
  }
}

//takes our application state as an argument (in this case, array of books). Whatever gets returned will show up as props inside of bookList.
//this function is the glue between react and redux. very important.
// if our app state ever changes this conatiner (bookList) will re-render with the new list of books automatically.
function mapStateToProps(state) {
  return {
    books: state.books
  };
}
// Anything returned from this function will end up as props in the BookList container.
// this will allow for this.props.selectBook
function mapDispatchToProps(dispatch){
  //whenever selectBook is called the result should be passed to all of our reducers.
  //selectBook is a plain function. But the purpose of bindActionCreators and dispatch, take what gets returned from selectbook and make sure it flows through all of the reducers
  return bindActionCreators ({ selectBook: selectBook}, dispatch);
}

//connect takes a function and a component and produces a container. The container is a compoent that is aware of the state that is contained by Redux.
//promote BookList from a component to a container, it needs to know about htis new dispatch method, selectBook. Make it available as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
